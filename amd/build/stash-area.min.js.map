{"version":3,"file":"stash-area.min.js","sources":["../src/stash-area.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Stash module.\n *\n * @copyright  2016 Frédéric Massart - FMCorz.net\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as ItemModal from 'block_stash/item-modal';\nimport * as PubSub from 'core/pubsub';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\n\nvar _collections = [];\nvar _node = null;\n\nexport const init = async(courseid) => {\n    _node = document.querySelector('.block-stash-main-block');\n    _collections = await getCollectionData(courseid);\n    // window.console.log(_collections);\n    setUpUserItemAreClickable();\n    PubSub.subscribe('block_stash/drop/pickedup', dropPickedUpListener.bind(this));\n    PubSub.subscribe('trade:pickedup', dropPickedUpListener.bind(this));\n};\n\nconst getCollectionData = (courseid) => {\n    return Ajax.call([\n        {\n            methodname: 'block_stash_get_collections',\n            args: {courseid: courseid}\n        }\n    ])[0];\n};\n\nconst renderUserItem = (userItem) => {\n    return Templates.render('block_stash/user_item', {\n        item: userItem.getItem().getData(),\n        useritem: userItem.getData(),\n    });\n};\n\nconst setUpUserItemAreClickable = () => {\n    let stashitems = _node.querySelectorAll('.block-stash-item');\n    stashitems.forEach(function(item) {\n        makeUserItemNodeClickable(item);\n    });\n\n    const handler = (e) => {\n        if (e.target.closest('.block-stash-item')) {\n            const itemelement = e.target.closest('.block-stash-item');\n            const itemId = itemelement.dataset.id;\n\n            if (!itemId) {\n                return;\n            }\n\n            ItemModal.init(itemId);\n            e.preventDefault();\n        }\n    };\n\n    let itemlist = _node.querySelector('.item-list');\n    itemlist.addEventListener('click', (e) => handler(e));\n    itemlist.addEventListener('keydown', (e) => {\n        if (e.keyCode != 13 && e.keyCode != 32) {\n            return;\n        }\n        handler(e);\n    });\n};\n\nconst makeUserItemNodeClickable = (node) => {\n    node.setAttribute('tabindex', 0);\n    node.setAttribute('role', 'button');\n    node.setAttribute('aria-haspopup', 'true');\n};\n\nconst dropPickedUpListener = (e) => {\n    let userItem = e.useritem;\n    if (containsItem(userItem.getItem().get('id'))) {\n        updateUserItemQuantity(userItem);\n    } else {\n        addUserItem(userItem).then(() => {\n            const emptyelement = document.querySelector('.empty-content');\n            if (emptyelement !== null) {\n                document.querySelector('.empty-content').remove();\n            }\n        });\n    }\n};\n\nconst containsItem = (itemId) => {\n    const itemnode = _node.querySelector('.block-stash-item[data-id=\"' + itemId + '\"]');\n    return (itemnode);\n};\n\nconst updateUserItemQuantity = (userItem) => {\n    const itemnodes = _node.querySelectorAll('.block-stash-item[data-id=\"' + userItem.getItem().get('id') + '\"]');\n    itemnodes.forEach((itemnode) => {\n        const quantityNode = itemnode.querySelector('.item-quantity'),\n              newQuantity = userItem.get('quantity'),\n              quantity = parseInt(quantityNode.textContent, 10);\n\n        quantityNode.textContent = newQuantity;\n        quantityNode.style.display = 'block';\n        itemnode.classList.remove('item-quantity-' + quantity);\n        itemnode.classList.add('item-quantity-' + newQuantity);\n        if (newQuantity == \"0\") {\n            window.console.log(\"I want to know about it\");\n            // Get collection ids\n            const collectionids = getCollectionDisplayInfo(userItem);\n            if (collectionids.length > 0) {\n                collectionids.forEach(async(id) => {\n                    const collectioncontainer = _node.querySelector('.block-stash-collections[data-collectionid=\"' + id + '\"');\n                    if (collectioncontainer) {\n                        const existinglegendelement = collectioncontainer.querySelector('legend');\n                        existinglegendelement.innerText = await getCollectionString(id, true);\n                        // If the legend color style is set then remove\n                        if (existinglegendelement.getAttribute(\"style\") !== null) {\n                            existinglegendelement.style.removeProperty(\"color\");\n                            existinglegendelement.style.removeProperty(\"border-color\");\n                        }\n                    }\n                });\n            }\n        }\n    });\n};\n\nconst addUserItem = (userItem) => {\n    return renderUserItem(userItem).then((html, js) => {\n        // We have two areas to update now, the all tab and the collections tab.\n        // window.console.log(_collections);\n        const collectionids = getCollectionDisplayInfo(userItem);\n        const template = document.createElement('template');\n        template.innerHTML = html;\n        const node = template.content.firstChild;\n        // All items display\n        const container = document.querySelector('#allitems');\n        node.dataset.useritem = userItem;\n        makeUserItemNodeClickable(node);\n        container.append(' ');  // A hacky separator to replicate natural rendering.\n        container.append(node);\n\n        // Collections display\n        if (collectionids.length > 0) {\n            collectionids.forEach(async(id) => {\n                let collectionnode = node.cloneNode(true);\n                const collectioncontainer = _node.querySelector('.block-stash-collections[data-collectionid=\"' + id + '\"');\n                if (collectioncontainer) {\n                    const existinglegendelement = collectioncontainer.querySelector('legend');\n                    existinglegendelement.innerText = await getCollectionString(id);\n                    collectioncontainer.appendChild(collectionnode);\n                    if (softCheckCollectioComplete(id)) {\n                        existinglegendelement.style.borderColor = '#088208';\n                        existinglegendelement.style.color = '#088208';\n                    }\n                    // window.console.log(existinglegendelement);\n\n                } else {\n                    // If there are no items in the collection then the collection needs to be added.\n                    const collectionelement = document.createElement('fieldset');\n                    collectionelement.classList.add(\"block-stash-collections\", \"mb-1\", \"p-2\");\n                    collectionelement.dataset.collectionid = id;\n                    // Now we need a legend.\n                    const legendelement = document.createElement('legend');\n                    legendelement.classList.add('block-stash-collection-legend', 'p-1');\n                    legendelement.innerText = await getCollectionString(id);\n                    collectionelement.appendChild(legendelement);\n                    collectionelement.appendChild(collectionnode);\n                    const parentelement = _node.querySelector('.block-stash-collections-area');\n                    parentelement.appendChild(collectionelement);\n                }\n            });\n        }\n\n        Templates.runTemplateJS(js);\n    });\n};\n\nconst getCollectionString = async(collectionid, check = false) => {\n    const currentcount = countCollectionItems(collectionid);\n    const collection = getInternalCollectionData(collectionid);\n    let collectedcount = (check) ? currentcount : parseInt(currentcount+1);\n    const data = {\n        name: collection['collection'].name,\n        collected: collectedcount,\n        total: collection['items'].length\n    };\n    const colstring = await getString('collected', 'block_stash', data);\n    return colstring;\n};\n\nconst countCollectionItems = (collectionid) => {\n    const collectioncontainer = _node.querySelector('.block-stash-collections[data-collectionid=\"' + collectionid + '\"');\n    if (!collectioncontainer) {\n        return 0;\n    }\n    const items = collectioncontainer.querySelectorAll('.block-stash-item');\n    let collectioncount = items.length;\n    items.forEach((item) => {\n        const quantitynode = item.querySelector('.item-quantity');\n        if (quantitynode.innerText == '0') {\n            collectioncount--;\n        }\n    });\n    return collectioncount;\n};\n\nconst softCheckCollectioComplete = (collectionid) => {\n    const currentcount = countCollectionItems(collectionid);\n    const collection = getInternalCollectionData(collectionid);\n    return (collection['items'].length == currentcount);\n};\n\nconst getInternalCollectionData = (collectionid) => {\n    let collectionresult = null;\n    _collections.forEach((collection) => {\n        if (collection['collection'].id == collectionid) {\n            collectionresult = collection;\n        }\n    });\n    return collectionresult;\n};\n\nconst getCollectionDisplayInfo = (userItem) => {\n    // Loop through each collection\n    let data = [];\n    _collections.forEach((collection) => {\n        // Loop through the collections items to see if we have a match.\n        collection['items'].forEach((item) => {\n            if (item.id == userItem.getItem().get('id')) {\n                const quick = collection['collection'];\n                data.push(quick.id);\n            }\n\n        });\n    });\n    return data;\n};\n"],"names":["_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_interopRequireDefault","_ajax","ItemModal","PubSub","_templates","_collections","_node","_exports","init","async","document","querySelector","getCollectionData","courseid","setUpUserItemAreClickable","subscribe","dropPickedUpListener","bind","Ajax","methodname","args","querySelectorAll","forEach","item","makeUserItemNodeClickable","handler","target","closest","itemId","dataset","id","preventDefault","itemlist","addEventListener","keyCode","node","setAttribute","userItem","useritem","containsItem","getItem","updateUserItemQuantity","addUserItem","then","remove","itemnode","quantityNode","newQuantity","quantity","parseInt","textContent","style","display","classList","add","window","console","log","collectionids","getCollectionDisplayInfo","length","collectioncontainer","existinglegendelement","innerText","getCollectionString","getAttribute","removeProperty","Templates","render","getData","renderUserItem","html","js","template","createElement","innerHTML","content","firstChild","container","append","collectionnode","cloneNode","appendChild","softCheckCollectioComplete","borderColor","color","collectionelement","collectionid","legendelement","runTemplateJS","check","arguments","undefined","currentcount","countCollectionItems","collection","getInternalCollectionData","collectedcount","data","name","collected","total","getString","items","collectioncount","collectionresult","quick","push"],"mappings":"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"}