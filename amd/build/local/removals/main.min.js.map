{"version":3,"file":"main.min.js","sources":["../../../src/local/removals/main.js"],"sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport * as tradeAdder from 'block_stash/local/trade_adder/main';\nimport Ajax from 'core/ajax';\nimport * as getItems from 'block_stash/local/datasources/items-getter';\n\nconst showModal = async(courseid, editdetails = []) => {\n    const modal = await buildModal(courseid, editdetails);\n    displayModal(modal, courseid);\n};\n\nconst buildModal = async(courseid, editdetails) => {\n\n    // Fetch quizzes.\n    let quizzes = await fetchQuizData(courseid);\n\n    quizzes.activities.forEach((quiz) => {\n        quiz['selected'] = false;\n        if (editdetails.length !== 0) {\n            if (quiz.id == editdetails.quizid) {\n                quiz['selected'] = true;\n            }\n        }\n    });\n\n    let context = {'courseid': courseid, 'quizzes': quizzes.activities};\n    if (editdetails.length !== 0) {\n        let allitems = await getItems.getIndexedItems(courseid);\n        let additemsdata = [];\n        editdetails.items.forEach((item) => {\n            additemsdata.push(\n                {\n                    'itemid': item.itemid,\n                    'name': allitems[item.itemid].name,\n                    'quantity': item.quantity,\n                    'imageurl': allitems[item.itemid].imageurl\n                }\n            );\n        });\n        context['additems'] = additemsdata;\n        context['removalid'] = editdetails.removalid;\n    }\n    window.console.log(context);\n\n    return ModalFactory.create({\n        title: context.name,\n        body: Templates.render('block_stash/local/removal/removal_form', context),\n        type: ModalFactory.types.SAVE_CANCEL\n    });\n};\n\nconst displayModal = async(modal, courseid) => {\n\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        tradeAdder.init();\n        tradeAdder.registerActions();\n    });\n\n    modal.getRoot().on(ModalEvents.save, () => {\n        saveData(courseid);\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n    modal.show();\n};\n\nconst saveData = async (courseid) => {\n    let itemsinfo = document.querySelectorAll('.block-stash-quantity');\n    let items = [];\n    let returnitemdata = [];\n    itemsinfo.forEach((item) => {\n        let itemid = item.closest('.block-stash-trade-item').getAttribute('data-id');\n        let basedata = {\n            'itemid': parseInt(itemid),\n            'quantity': parseInt(item.value)\n        };\n        // Do it again, but duplicating objects just ends up with a reference which is not what I want.\n        let fulldata = {\n            'itemid': parseInt(itemid),\n            'quantity': parseInt(item.value),\n            'name': item.closest('.block-stash-trade-item').children[0].innerText.trim()\n        };\n        items.push(basedata);\n        returnitemdata.push(fulldata);\n    });\n    let quizselect = document.querySelector('.block-stash-quiz-select');\n    let cmid = quizselect.value;\n    let removalid = await saveRemovalEntry(courseid, parseInt(cmid), items);\n    let context = {\n        'cmid': cmid,\n        'cmname': quizselect.item(quizselect.selectedIndex).text,\n        'courseid': courseid,\n        'removalid': removalid,\n        'items': returnitemdata,\n        'editinfo': JSON.stringify(items)\n    };\n    // window.console.log(context);\n    Templates.render('block_stash/local/removal/table_row', context).then((html, js) => {\n        let tableobject = document.querySelector('.block-stash-removal-body');\n        let things = Templates.appendNodeContents(tableobject, html, js);\n        registerDeleteEvent(courseid, things[0].querySelector('.block-stash-removal-icon'));\n        registerEditEvent(courseid, things[0].querySelector('.block-stash-removal-edit'));\n    });\n};\n\nconst registerDeleteEvent = (courseid, deleteobject) => {\n    deleteobject.addEventListener('click', (e) => {\n        e.preventDefault();\n        let deletionelement = e.currentTarget;\n        let removalid = deletionelement.dataset.id;\n        // Make ajax request to delete this removal configuration.\n        deleteRemovalEntry(courseid, parseInt(removalid)).then(() => {\n            // If the request was okay then remove the table row.\n            let row = deletionelement.closest('tr');\n            row.remove();\n        });\n    });\n};\n\nconst registerEditEvent = (courseid, editobject) => {\n    editobject.addEventListener('click', (e) => {\n        e.preventDefault();\n        let jsondata = JSON.parse(editobject.dataset.json);\n        let details = {'removalid': editobject.dataset.id, 'quizid': editobject.dataset.quiz, 'items': jsondata};\n        showModal(courseid, details);\n    });\n};\n\nexport const init = (courseid) => {\n\n    let configbutton = document.querySelector('.block-config-removal');\n    configbutton.addEventListener('click', (e) => {\n        e.preventDefault();\n        showModal(courseid);\n    });\n\n    let deletebutton = document.querySelectorAll('.block-stash-removal-icon');\n    deletebutton.forEach((deleteobject) => {\n        registerDeleteEvent(courseid, deleteobject);\n    });\n\n    let editbutton = document.querySelectorAll('.block-stash-removal-edit');\n    editbutton.forEach((editobject) => {\n        registerEditEvent(courseid, editobject);\n        // editobject.addEventListener('click', (e) => {\n        //     e.preventDefault();\n        //     let jsondata = JSON.parse(editobject.dataset.json);\n        //     let details = {'removalid': editobject.dataset.id, 'quizid': editobject.dataset.quiz, 'items': jsondata};\n        //     showModal(courseid, details);\n        // });\n    });\n};\n\nconst fetchQuizData = (courseid) => Ajax.call([{\n    methodname: 'block_stash_get_removal_activities',\n    args: {courseid: courseid}\n}])[0];\n\nconst saveRemovalEntry = (courseid, cmid, items) => Ajax.call([{\n    methodname: 'block_stash_save_removal',\n    args: {'courseid': courseid, 'cmid': cmid, 'items': items}\n}])[0];\n\nconst deleteRemovalEntry = (courseid, removalid) => Ajax.call([{\n    methodname: 'block_stash_delete_removal',\n    args: {'courseid': courseid, 'removalid': removalid}\n}])[0];\n"],"names":["showModal","async","courseid","editdetails","modal","buildModal","displayModal","quizzes","fetchQuizData","activities","forEach","quiz","length","id","quizid","context","allitems","getItems","getIndexedItems","additemsdata","items","item","push","itemid","name","quantity","imageurl","removalid","window","console","log","ModalFactory","create","title","body","Templates","render","type","types","SAVE_CANCEL","getRoot","on","ModalEvents","bodyRendered","tradeAdder","init","registerActions","save","saveData","hidden","destroy","show","itemsinfo","document","querySelectorAll","returnitemdata","closest","getAttribute","basedata","parseInt","value","fulldata","children","innerText","trim","quizselect","querySelector","cmid","saveRemovalEntry","selectedIndex","text","JSON","stringify","then","html","js","tableobject","things","appendNodeContents","registerDeleteEvent","registerEditEvent","deleteobject","addEventListener","e","preventDefault","deletionelement","currentTarget","dataset","deleteRemovalEntry","remove","editobject","jsondata","parse","json","details","Ajax","call","methodname","args"],"mappings":"qpDAOMA,UAAYC,eAAMC,cAAUC,mEAAc,SACtCC,YAAcC,WAAWH,SAAUC,aACzCG,aAAaF,MAAOF,WAGlBG,WAAaJ,MAAMC,SAAUC,mBAG3BI,cAAgBC,cAAcN,UAElCK,QAAQE,WAAWC,SAASC,OACxBA,KAAI,UAAe,EACQ,IAAvBR,YAAYS,QACRD,KAAKE,IAAMV,YAAYW,SACvBH,KAAI,UAAe,UAK3BI,QAAU,UAAab,iBAAqBK,QAAQE,eAC7B,IAAvBN,YAAYS,OAAc,KACtBI,eAAiBC,SAASC,gBAAgBhB,UAC1CiB,aAAe,GACnBhB,YAAYiB,MAAMV,SAASW,OACvBF,aAAaG,KACT,QACcD,KAAKE,YACPP,SAASK,KAAKE,QAAQC,cAClBH,KAAKI,kBACLT,SAASK,KAAKE,QAAQG,cAI9CX,QAAO,SAAeI,aACtBJ,QAAO,UAAgBZ,YAAYwB,iBAEvCC,OAAOC,QAAQC,IAAIf,SAEZgB,uBAAaC,OAAO,CACvBC,MAAOlB,QAAQS,KACfU,KAAMC,mBAAUC,OAAO,yCAA0CrB,SACjEsB,KAAMN,uBAAaO,MAAMC,eAI3BjC,aAAeL,MAAMG,MAAOF,YAE9BE,MAAMoC,UAAUC,GAAGC,sBAAYC,cAAc,KACzCC,WAAWC,OACXD,WAAWE,qBAGf1C,MAAMoC,UAAUC,GAAGC,sBAAYK,MAAM,KACjCC,SAAS9C,aAGbE,MAAMoC,UAAUC,GAAGC,sBAAYO,QAAQ,KACnC7C,MAAM8C,aAEV9C,MAAM+C,QAGJH,SAAW/C,MAAAA,eACTmD,UAAYC,SAASC,iBAAiB,yBACtClC,MAAQ,GACRmC,eAAiB,GACrBH,UAAU1C,SAASW,WACXE,OAASF,KAAKmC,QAAQ,2BAA2BC,aAAa,WAC9DC,SAAW,QACDC,SAASpC,iBACPoC,SAAStC,KAAKuC,QAG1BC,SAAW,QACDF,SAASpC,iBACPoC,SAAStC,KAAKuC,YAClBvC,KAAKmC,QAAQ,2BAA2BM,SAAS,GAAGC,UAAUC,QAE1E5C,MAAME,KAAKoC,UACXH,eAAejC,KAAKuC,iBAEpBI,WAAaZ,SAASa,cAAc,4BACpCC,KAAOF,WAAWL,MAClBjC,gBAAkByC,iBAAiBlE,SAAUyD,SAASQ,MAAO/C,OAC7DL,QAAU,MACFoD,YACEF,WAAW5C,KAAK4C,WAAWI,eAAeC,cACxCpE,mBACCyB,gBACJ4B,wBACGgB,KAAKC,UAAUpD,2BAGrBgB,OAAO,sCAAuCrB,SAAS0D,MAAK,CAACC,KAAMC,UACrEC,YAAcvB,SAASa,cAAc,6BACrCW,OAAS1C,mBAAU2C,mBAAmBF,YAAaF,KAAMC,IAC7DI,oBAAoB7E,SAAU2E,OAAO,GAAGX,cAAc,8BACtDc,kBAAkB9E,SAAU2E,OAAO,GAAGX,cAAc,kCAItDa,oBAAsB,CAAC7E,SAAU+E,gBACnCA,aAAaC,iBAAiB,SAAUC,IACpCA,EAAEC,qBACEC,gBAAkBF,EAAEG,cACpB3D,UAAY0D,gBAAgBE,QAAQ1E,GAExC2E,mBAAmBtF,SAAUyD,SAAShC,YAAY8C,MAAK,KAEzCY,gBAAgB7B,QAAQ,MAC9BiC,gBAKVT,kBAAoB,CAAC9E,SAAUwF,cACjCA,WAAWR,iBAAiB,SAAUC,IAClCA,EAAEC,qBACEO,SAAWpB,KAAKqB,MAAMF,WAAWH,QAAQM,MACzCC,QAAU,WAAcJ,WAAWH,QAAQ1E,UAAc6E,WAAWH,QAAQ5E,WAAegF,UAC/F3F,UAAUE,SAAU4F,2BAIP5F,WAEEmD,SAASa,cAAc,yBAC7BgB,iBAAiB,SAAUC,IACpCA,EAAEC,iBACFpF,UAAUE,aAGKmD,SAASC,iBAAiB,6BAChC5C,SAASuE,eAClBF,oBAAoB7E,SAAU+E,iBAGjB5B,SAASC,iBAAiB,6BAChC5C,SAASgF,aAChBV,kBAAkB9E,SAAUwF,sBAU9BlF,cAAiBN,UAAa6F,cAAKC,KAAK,CAAC,CAC3CC,WAAY,qCACZC,KAAM,CAAChG,SAAUA,aACjB,GAEEkE,iBAAmB,CAAClE,SAAUiE,KAAM/C,QAAU2E,cAAKC,KAAK,CAAC,CAC3DC,WAAY,2BACZC,KAAM,UAAahG,cAAkBiE,WAAe/C,UACpD,GAEEoE,mBAAqB,CAACtF,SAAUyB,YAAcoE,cAAKC,KAAK,CAAC,CAC3DC,WAAY,6BACZC,KAAM,UAAahG,mBAAuByB,cAC1C"}