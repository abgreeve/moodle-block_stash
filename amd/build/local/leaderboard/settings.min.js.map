{"version":3,"file":"settings.min.js","sources":["../../../src/local/leaderboard/settings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Leaderboard settings JavaScript\n *\n * @copyright 2023 Adrian Greeve <adriangreeve.com>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {add as addToast} from 'core/toast';\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\n\nexport const init = () => {\n    let lbsetting = document.querySelector('.block-stash-lbsetting');\n    lbsetting.addEventListener('change', (e) => {\n\n        let currenttarget = e.currentTarget;\n        updateSetting(currenttarget.dataset.courseid, 'leaderboard', currenttarget.checked).then((result) => {\n            if (result) {\n                addToast(getString('settingupdated', 'block_stash'), {\n                    type: 'info',\n                    autohide: true,\n                    closeButton: true,\n                });\n            }\n        });\n\n        let mainboards = document.querySelector('.block_stash_lb_cards');\n        if (currenttarget.checked) {\n            mainboards.classList.remove('invisible');\n        } else {\n            mainboards.classList.add('invisible');\n        }\n    });\n\n    let lbgroupswitch = document.querySelector('.block-stash-lbgroups');\n    lbgroupswitch.addEventListener('change', (e) => {\n        let currenttarget = e.currentTarget;\n        updateSetting(currenttarget.dataset.courseid, 'leaderboard_groups', currenttarget.checked).then((result) => {\n            if (result) {\n                addToast(getString('settingupdated', 'block_stash'), {\n                    type: 'info',\n                    autohide: true,\n                    closeButton: true,\n                });\n            }\n        });\n    });\n\n    let otherboards = document.querySelectorAll('.block_stash-leaderboard');\n    otherboards.forEach((board) => {\n        board.addEventListener('change', (e) => {\n            let otherboardelement = e.currentTarget;\n            let enabled = otherboardelement.checked;\n\n            let boardlimit = otherboardelement.parentNode.parentNode.querySelector('.block_stash-leaderboard-limit');\n            if (!enabled) {\n                boardlimit.setAttribute('disabled', true);\n            } else {\n                boardlimit.removeAttribute('disabled');\n            }\n            const hiddenthing = otherboardelement.parentNode.parentNode.querySelector('input[type=\"hidden\"]');\n            const options = hiddenthing.dataset.options;\n\n            updateLeaderboard(otherboardelement.dataset.courseid, otherboardelement.dataset.location, options, 'DESC',\n                boardlimit.value, enabled)\n            .then((result) => {\n                if (result) {\n                    addToast(getString('settingupdated', 'block_stash'), {\n                        type: 'info',\n                        autohide: true,\n                        closeButton: true,\n                    });\n                }\n            });\n        });\n    });\n\n    let rowlimits = document.querySelectorAll('.block_stash_change_element');\n    rowlimits.forEach((limit) => {\n        limit.addEventListener('change', (e) => {\n            let currenttarget = e.currentTarget;\n            let otherthing = currenttarget.parentNode.parentNode.parentNode.querySelector('.block_stash-leaderboard');\n            let rowlimit = otherthing.parentNode.parentNode.querySelector('.block_stash-leaderboard-limit');\n            const hiddenthing = otherthing.parentNode.parentNode.querySelector('input[type=\"hidden\"]');\n            const options = hiddenthing.dataset.options;\n            updateLeaderboard(otherthing.dataset.courseid, otherthing.dataset.location, options, 'DESC', rowlimit.value, true)\n            .then((result) => {\n                if (result) {\n                    addToast(getString('settingupdated', 'block_stash'), {\n                        type: 'info',\n                        autohide: true,\n                        closeButton: true,\n                    });\n                }\n            });\n        });\n    });\n};\n\nconst updateSetting = (courseid, key, value) => {\n    return Ajax.call([{\n        methodname: 'block_stash_leaderboard_settings',\n        args: {\n            courseid: courseid,\n            key: key,\n            value: value\n        }\n    }])[0];\n};\n\nconst updateLeaderboard = (courseid, title, options, sortorder, limit, enabled) => {\n    return Ajax.call([{\n        methodname: 'block_stash_leaderboard_update',\n        args: {\n            courseid: courseid,\n            boardname: title,\n            options: options,\n            sortorder: sortorder,\n            rowlimit: limit,\n            enabled: enabled\n        }\n    }])[0];\n};\n"],"names":["e","_ajax","__esModule","default","_exports","init","document","querySelector","addEventListener","currenttarget","currentTarget","updateSetting","dataset","courseid","checked","then","result","addToast","getString","type","autohide","closeButton","mainboards","classList","remove","add","querySelectorAll","forEach","board","otherboardelement","enabled","boardlimit","parentNode","removeAttribute","setAttribute","options","updateLeaderboard","location","value","limit","otherthing","rowlimit","key","Ajax","call","methodname","args","title","sortorder","boardname"],"mappings":"qIAuB6B,IAAAA;;;;;;kFAA7BC,OAA6BD,EAA7BC,QAA6BD,EAAAE,WAAAF,GAAAG,QAAAH,GAyF3BI,SAAAC,KAtFkBA,KACAC,SAASC,cAAc,0BAC7BC,iBAAiB,SAAWR,IAElC,IAAIS,cAAgBT,EAAEU,cACtBC,cAAcF,cAAcG,QAAQC,SAAU,cAAeJ,cAAcK,SAASC,KAAMC,SAClFA,SACA,EAAAC,aAAS,EAAAC,iBAAU,iBAAkB,eAAgB,CACjDC,KAAM,OACNC,UAAU,EACVC,aAAa,MAKzB,IAAIC,WAAahB,SAASC,cAAc,yBACpCE,cAAcK,QACdQ,WAAWC,UAAUC,OAAO,aAE5BF,WAAWC,UAAUE,IAAI,eAIbnB,SAASC,cAAc,yBAC7BC,iBAAiB,SAAWR,IACtC,IAAIS,cAAgBT,EAAEU,cACtBC,cAAcF,cAAcG,QAAQC,SAAU,qBAAsBJ,cAAcK,SAASC,KAAMC,SACzFA,SACA,EAAAC,aAAS,EAAAC,iBAAU,iBAAkB,eAAgB,CACjDC,KAAM,OACNC,UAAU,EACVC,aAAa,QAMXf,SAASoB,iBAAiB,4BAChCC,QAASC,QACjBA,MAAMpB,iBAAiB,SAAWR,IAC9B,IAAI6B,kBAAoB7B,EAAEU,cACtBoB,QAAUD,kBAAkBf,QAE5BiB,WAAaF,kBAAkBG,WAAWA,WAAWzB,cAAc,kCAClEuB,QAGDC,WAAWE,gBAAgB,YAF3BF,WAAWG,aAAa,YAAY,GAIxC,MACMC,QADcN,kBAAkBG,WAAWA,WAAWzB,cAAc,wBAC9CK,QAAQuB,QAEpCC,kBAAkBP,kBAAkBjB,QAAQC,SAAUgB,kBAAkBjB,QAAQyB,SAAUF,QAAS,OAC/FJ,WAAWO,MAAOR,SACrBf,KAAMC,SACCA,SACA,EAAAC,aAAS,EAAAC,iBAAU,iBAAkB,eAAgB,CACjDC,KAAM,OACNC,UAAU,EACVC,aAAa,UAOjBf,SAASoB,iBAAiB,+BAChCC,QAASY,QACfA,MAAM/B,iBAAiB,SAAWR,IAC9B,IACIwC,WADgBxC,EAAEU,cACSsB,WAAWA,WAAWA,WAAWzB,cAAc,4BAC1EkC,SAAWD,WAAWR,WAAWA,WAAWzB,cAAc,kCAC9D,MACM4B,QADcK,WAAWR,WAAWA,WAAWzB,cAAc,wBACvCK,QAAQuB,QACpCC,kBAAkBI,WAAW5B,QAAQC,SAAU2B,WAAW5B,QAAQyB,SAAUF,QAAS,OAAQM,SAASH,OAAO,GAC5GvB,KAAMC,SACCA,SACA,EAAAC,aAAS,EAAAC,iBAAU,iBAAkB,eAAgB,CACjDC,KAAM,OACNC,UAAU,EACVC,aAAa,WAQrC,MAAMV,cAAgBA,CAACE,SAAU6B,IAAKJ,QAC3BK,cAAKC,KAAK,CAAC,CACdC,WAAY,mCACZC,KAAM,CACFjC,SAAUA,SACV6B,IAAKA,IACLJ,MAAOA,UAEX,GAGFF,kBAAoBA,CAACvB,SAAUkC,MAAOZ,QAASa,UAAWT,MAAOT,UAC5Da,cAAKC,KAAK,CAAC,CACdC,WAAY,iCACZC,KAAM,CACFjC,SAAUA,SACVoC,UAAWF,MACXZ,QAASA,QACTa,UAAWA,UACXP,SAAUF,MACVT,QAASA,YAEb,EACN"}