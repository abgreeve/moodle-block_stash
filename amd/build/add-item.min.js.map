{"version":3,"file":"add-item.min.js","sources":["../src/add-item.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Add items to a table.\n *\n * @copyright 2019 Adrian Greeve <adriangreeve.com>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\n\nlet useritems = [];\n\nconst addItem = (e) => {\n    e.preventDefault();\n\n    let addbtn = e.currentTarget;\n\n    let selectedtype = addbtn.getAttribute('data-add-item');\n    let selectedobject = document.getElementById(selectedtype);\n    let optionelement = selectedobject.options[selectedobject.selectedIndex];\n    let context = {\n        id: optionelement.getAttribute('data-itemid'),\n        itemid: optionelement.getAttribute('data-itemid'),\n        name: optionelement.innerText,\n        imageurl: optionelement.getAttribute('data-imgurl'),\n        useritemid: optionelement.value,\n        quantity: optionelement.getAttribute('data-amount'),\n        selecttype: selectedtype\n    };\n\n    setItem(context);\n};\n\nconst setItem = (context) => {\n    let tableelement = document.querySelector('table[data-type=\"' + context.selecttype + '\"]');\n    Templates.render('block_stash/add_item_detail', context).then((html, js) => {\n        if (tableelement.getAttribute('data-status') == 'empty') {\n            Templates.replaceNodeContents(tableelement, html, js);\n            tableelement.setAttribute('data-status', 'thing');\n        } else {\n            Templates.appendNodeContents(tableelement, html, js);\n        }\n        registerItemElementEvents();\n    });\n};\n\nconst registerItemElementEvents = () => {\n    let deleteButtons = document.getElementsByClassName('block-stash-delete-item');\n    deleteButtons.forEach((deleteButton) => {\n        deleteButton.addEventListener('click', deleteItem);\n    });\n};\n\nconst deleteItem = (e) => {\n    let itemelement = e.currentTarget;\n    let fullelement = itemelement.parentNode.parentNode;\n    fullelement.remove();\n};\n\nconst updateUserItems = () => {\n    let selectelement = document.getElementById('your-items');\n    for (let cnode of selectelement.options) {\n        let itemid = cnode.dataset.itemid;\n        useritems[itemid] = {\n            id: itemid,\n            itemid: itemid,\n            name: cnode.innerText,\n            imageurl: cnode.dataset.imgurl,  //optionelement.getAttribute('data-imgurl'),\n            useritemid: cnode.value,\n            quantity: cnode.dataset.amount,\n            selecttype: 'your-items'\n        };\n    }\n};\n\nexport const init = () => {\n\n    // Get informations about the other users items.\n    updateUserItems();\n    let formelement = document.querySelector('form');\n    if (formelement.hasAttribute('data-itemid')) {\n        let itemid = formelement.dataset.itemid;\n        setItem(useritems[itemid]);\n    }\n\n    let addbtns = document.querySelectorAll('[data-add-item]');\n    addbtns.forEach((addbutton) => {\n        addbutton.addEventListener('click', addItem);\n    });\n};\n"],"names":["e","_templates","__esModule","default","useritems","addItem","preventDefault","selectedtype","currentTarget","getAttribute","selectedobject","document","getElementById","optionelement","options","selectedIndex","context","id","itemid","name","innerText","imageurl","useritemid","value","quantity","selecttype","setItem","tableelement","querySelector","Templates","render","then","html","js","replaceNodeContents","setAttribute","appendNodeContents","registerItemElementEvents","getElementsByClassName","forEach","deleteButton","addEventListener","deleteItem","parentNode","remove","_exports","init","updateUserItems","selectelement","cnode","dataset","imgurl","amount","formelement","hasAttribute","querySelectorAll","addbutton"],"mappings":"yFAsBuC,IAAAA;;;;;;kFAAvCC,YAAuCD,EAAvCC,aAAuCD,EAAAE,WAAAF,GAAAG,QAAAH,GAEvC,IAAII,UAAY,GAEhB,MAAMC,QAAWL,IACbA,EAAEM,iBAEF,IAEIC,aAFSP,EAAEQ,cAEWC,aAAa,iBACnCC,eAAiBC,SAASC,eAAeL,cACzCM,cAAgBH,eAAeI,QAAQJ,eAAeK,eACtDC,QAAU,CACVC,GAAIJ,cAAcJ,aAAa,eAC/BS,OAAQL,cAAcJ,aAAa,eACnCU,KAAMN,cAAcO,UACpBC,SAAUR,cAAcJ,aAAa,eACrCa,WAAYT,cAAcU,MAC1BC,SAAUX,cAAcJ,aAAa,eACrCgB,WAAYlB,cAGhBmB,QAAQV,UAGNU,QAAWV,UACb,IAAIW,aAAehB,SAASiB,cAAc,oBAAsBZ,QAAQS,WAAa,MACrFI,mBAAUC,OAAO,8BAA+Bd,SAASe,KAAK,CAACC,KAAMC,MACjB,SAA5CN,aAAalB,aAAa,gBAC1BoB,mBAAUK,oBAAoBP,aAAcK,KAAMC,IAClDN,aAAaQ,aAAa,cAAe,UAEzCN,mBAAUO,mBAAmBT,aAAcK,KAAMC,IAErDI,+BAIFA,0BAA4BA,KACV1B,SAAS2B,uBAAuB,2BACtCC,QAASC,eACnBA,aAAaC,iBAAiB,QAASC,eAIzCA,WAAc1C,IACEA,EAAEQ,cACUmC,WAAWA,WAC7BC,UAiCdC,SAAAC,KAdkBA,KAhBIC,MACpB,IAAIC,cAAgBrC,SAASC,eAAe,cAC5C,IAAK,IAAIqC,SAASD,cAAclC,QAAS,CACrC,IAAII,OAAS+B,MAAMC,QAAQhC,OAC3Bd,UAAUc,QAAU,CAChBD,GAAIC,OACJA,OAAQA,OACRC,KAAM8B,MAAM7B,UACZC,SAAU4B,MAAMC,QAAQC,OACxB7B,WAAY2B,MAAM1B,MAClBC,SAAUyB,MAAMC,QAAQE,OACxB3B,WAAY,gBAQpBsB,GACA,IAAIM,YAAc1C,SAASiB,cAAc,QACzC,GAAIyB,YAAYC,aAAa,eAAgB,CACzC,IAAIpC,OAASmC,YAAYH,QAAQhC,OACjCQ,QAAQtB,UAAUc,SAGRP,SAAS4C,iBAAiB,mBAChChB,QAASiB,YACbA,UAAUf,iBAAiB,QAASpC,WAE1C"}